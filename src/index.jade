doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title JavaScript Unit Testing

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available syntax highlighting themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-twilight.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    link(rel='stylesheet', type='text/css', href='styles/themes.css')
    // endbuild

  body.cube

    article

      section
        h1 JavaScript Unit Testing
        img(src="images/dilberttestscript.jpg" width="597")

      section
        h2 Why should we automate client side testing?
        .imagebox
          img.float-left(src="images/bigquestionmark.png" width="150")
          .sidebar Many of the same reasons we test our server side code

      section
        h2 Verify Expectations
        ul
          li
          li Happy path
            i.fa.fa-thumbs-up.icon-padding
          li Error conditions
            i.fa.fa-thumbs-down.icon-padding
          li Invalid input
            i.fa.fa-times.icon-padding
          li Unexpected input
            i.fa.fa-warning.icon-padding

      section
        h2 Prevent regressions
        img(src="images/gorilla-callout.png" width="500")

      section
        h2 Also known as...
        h2 Whack-a-mole!
        img(src="images/whackamole.jpg")

      section
        h2 Document Specs
        hr
        pre
          code.language-javascript.
            // Assume passwordValidator module has been loaded...
            describe('Password Validator', function() {
              it('Rejects short passwords', function() {
                var password = 'foo';
                var result = passwordValidator.isValid(password);
                expect(result).to.be(false);
              });
              it('Accepts password with mixed chars', function() {
                var password = 'abc123*&^%FEG'
                var result = passwordValidator.isValid(password);
                expect(result).to.be(true);
              });
            });

      section
        h2 Refactor with Confidence
        img(src="images/confidence.png" width="370" height="400")

      section
        h2 Leads to cleaner code
        .imagebox
          img.img-padding(src="images/clean-code-circle.png" width="200" height="200")
          img.img-padding(src="images/no-fish-circle.png" width="210" height="210")
        h3 If it's hard to test, that's a code smell

      section
        h2 In the words of Uncle Bob...
        blockquote(cite="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd") Why don't we clean up code that we know is messy? We're afraid we'll break it. But if we have the tests, we can be reasonably sure that the code is not broken, or that we'll detect the breakage immediately. If we have the tests we become fearless about making changes. If we see messy code, or an unclean structure, we can clean it without fear. Because of the tests, the code becomes malleable again. Because of the tests, software becomes soft again.

      section
        h2 JavaScript specific testing challenges
        ul
          li
          li What are the units?
          li Asynchronous execution
          li DOM manipulation

      section
        h2 What are the units?
        pre
          code.language-javascript.
            $('button').click(function() {
              var query = $('input').text();
              // Validation rule: only search if we have a query of at least two chars
              if (query && query.length >= 2) {
                $.ajax(url: 'http://content.guardianapis.com/search?show-fields=all&q=' + query, success: function(data) {
                  var items = data.response.results;
                  for (i = 0; i < items; i++) {
                    // Business rule: only show news items that have pictures
                    if (item.fields.thumbnail) {
                      // sentiment is a global!
                      sentimentResult = sentiment.analyze(item.fields.trailText);
                      $('table').append('&lt;tr&gt;')
                      $('table').append('&lt;td&gt;' + item.fields.byline + '&lt;/tr&gt;')  // author
                      $('table').append('&lt;td&gt;' + item.fields.trailText + '&lt;/tr&gt;')  // content
                      $('table').append('&lt;td&gt;' + item.fields.thumbnail + '&lt;/tr&gt;')  // thumbnail
                      $('table').append('&lt;td&gt;' + item.fields.webUrl + '&lt;/tr&gt;')  // url
                      $('table').append('&lt;td&gt;' + item.fields.webTitle + '&lt;/tr&gt;')  // title
                      $('table').append('&lt;td&gt;' + item.fields.webPublicationDate + '&lt;/tr&gt;')  // publishDate
                      $('table').append('&lt;td&gt;' + sentimentResult + '&lt;/tr&gt;')  // sentiment analysis
                      $('table').append('&lt;/tr&gt;')
                    }
                  }
                }, error: function(jqXHR, textStatus, errorThrown) {
                  $('.errorBox').text(textStatus + ', ' + errorThrown);
                  $('.errorBox').show();
                });
              }
            });

      section
        h2 Use a module system
        h3 Break up logic into small functions, declare dependencies in separate modules
        pre
          code.language-javascript.
            // News Module
            define(['jquery', 'sentiment'], function($, sentiment) {
              var init = function(config) { ... },
              var validate = function(query) { ... },
              var search = function(query) { ... },
              var display = function(loadInto, items) { ... }
            });

      section
        h2 A stack for JS testing
        ul
          li
          li
            a(href="http://visionmedia.github.io/mocha/") Mocha test framework
            |  describe... it...
          li
            a(href="http://chaijs.com/api/bdd/") Chai Assertion Library
            |  expect... to...
          li
            a(href="http://sinonjs.org/docs/") Sinon.JS
            |  spies, stubs, and mocks
          li
            a(href="http://karma-runner.github.io/0.12/intro/how-it-works.html") Karma Runner
            |  Multiple browsers, reporters

      section
        h2 Load module in a test
        pre
          code.language-javascript.
            // News module is the fixture under test
            define(['../news', 'jquery'], function(fixture, $) {
              describe('News Module', function() {
                it('Does something', function() {
                  expect(fixture.someMethod()).to.equal('something');
                });
              });
            });

      section
        h2 Demo
        h3 Simple function with no dependencies
        a(href="https://github.com/danielabar/learn-js-test/blob/master/app/scripts/news.js") Source
        | var validate = function(value)...
        a(href="https://github.com/danielabar/learn-js-test/blob/master/test/NewsSpec.js") Spec
        | describe('Validate', function()...

      // TODO Demo
      section
        h2 Mock out dependencies
        pre
          code.language-javascript.
            define(['../news', '../sentiment'], function(fixture, sentiment) {
              it('News conversion delegates to sentiment analysis', function() {

                var sentimentStub = sinon.stub(sentiment, 'analyze');
                sentimentStub.onCall(0).returns('positive');
                sentimentStub.onCall(2).returns('negative');

                var itemsFromApi = [{content: 'foo'}, {content: 'bar'}];
                var result = fixture.process(itemsFromApi);

                sinon.assert.calledwith(sentimentStub, 'foo')
                sinon.assert.calledwith(sentimentStub, 'bar')
              });
            });

      section
        h2 Demo
        h3 Async execution with sinon stub and mocha done
        a(href="https://github.com/danielabar/learn-js-test/blob/master/app/scripts/news.js") Source
        | var search = function(query)...
        a(href="https://github.com/danielabar/learn-js-test/blob/master/test/NewsSpec.js") Spec
        | describe('Search', function()...

      section
        h2 Demo
        h3 DOM manipulation with Karma html2js plugin
        a(href="https://github.com/danielabar/learn-js-test/blob/master/app/scripts/news.js") Source
        | var display = function(loadInto, displayItems)...
        a(href="https://github.com/danielabar/learn-js-test/blob/master/test/NewsSpec.js") Spec
        | describe('Display', function()...
        a(href="https://github.com/danielabar/learn-js-test/blob/master/test/html/AppSpec.html") HTML snippet

      section
        h2 Karma goodies
        ul
          li
          li Capture multiple browsers
            img(src="images/browser-icons.png" width="150")
          li Test from other devices
            i.fa.fa-mobile.icon-padding
            i.fa.fa-tablet.icon-padding
          li
            a(href="http://karma-runner.github.io/0.8/config/coverage.html") Coverage reporter
          li
            a(href="https://www.npmjs.org/search?q=karma") Many plugins available

      section
        h2 Further References
        ul
          li TBD...

    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/bespoke-forms/dist/bespoke-forms.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/main.js')
    // endbuild